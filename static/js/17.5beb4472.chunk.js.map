{"version":3,"sources":["components/edit/LocaleSelect.js"],"names":["locales","_","en","de","es","pt","fr","it","nl","da","sv","nb","fi","se","mt","pl","ru","bg","tr","ar","el","ro","sl","localesArray","Object","entries","map","code","nativeName","defaultOptions","keys","LocaleSelect","defaultValue","onChange","options","undefined","hasOwnProperty","useState","changedLocale","setChangedLocale","handleLocaleChange","useCallback","newLocale","trigger","triggerProps","isOpen","className","style","margin","flexShrink","width","textAlign","path","mdiTranslate","toUpperCase","marginLeft","lineHeight","verticalAlign","paperProps","sx","maxHeight","close","padding","filter","includes","onClick","selected"],"mappings":"6MAaMA,EAAU,CACdC,EAAG,KACHC,GAAI,UACJC,GAAI,UACJC,GAAI,aACJC,GAAI,eACJC,GAAI,cACJC,GAAI,WACJC,GAAI,aACJC,GAAI,QACJC,GAAI,UACJC,GAAI,kBACJC,GAAI,QACJC,GAAI,qCACJC,GAAI,QACJC,GAAI,oBACJC,GAAI,sEACJC,GAAI,kFACJC,GAAI,eACJC,GAAI,uFACJC,GAAI,mDACJC,GAAI,uBACJC,GAAI,yBAKAC,EAAeC,OAAOC,QAAQzB,GACnC0B,KAAI,yCAAyB,CAACC,KAA1B,KAAgCC,WAAhC,SAECC,EAAiBL,OAAOM,KAAK9B,GA6FpB+B,UA3Ff,YAII,IAHFC,EAGC,EAHDA,aACAC,EAEC,EAFDA,SAEC,IADDC,eACC,MADSL,EACT,EAEkB,OAAjBG,QACoBG,IAAjBH,GACiB,KAAjBA,IACyC,IAAzChC,EAAQoC,eAAeJ,KAE1BA,EAAe,KAGjB,MAA0CK,mBAASL,GAAnD,mBAAOM,EAAP,KAAsBC,EAAtB,KAEMC,EAAqBC,uBAAY,SAAAC,GACrCH,EAAiBG,GAEC,MAAdA,IACFA,EAAY,MAGVT,GACFA,EAASS,KAEV,CAAEH,EAAkBN,IAEvB,OACE,cAAC,IAAD,CACEU,QAAS,SAACC,EAAD,OAAiBC,EAAjB,EAAiBA,OAAjB,OACP,mDACMD,GADN,IAEEE,UAAU,kBACVC,MAAO,CACLC,OAAQ,IACRC,WAAY,KALhB,UAQE,sBAAMF,MAAO,CAAEG,MAAO,OAAQC,UAAW,SAAzC,SAEoB,MAAlBb,EACE,cAAC,IAAD,CACAc,KAAMC,IACNP,UAAU,SAEVR,EAAcgB,gBAGlB,sBAAMP,MAAO,CACXQ,WAAY,eACZC,WAAY,IACZC,cAAe,YAHjB,SAKIZ,EAAS,SAAM,gBAIvBa,WAAY,CACVC,GAAI,CACFC,UAAW,UA/BjB,SAmCG,gBAAGC,EAAH,EAAGA,MAAH,OACC,qBAAKd,MAAO,CACVe,QAAS,qBADX,SAIIvC,EACCwC,QAAO,gBAAGpC,EAAH,EAAGA,KAAH,OAAcO,EAAQ8B,SAASrC,MACtCD,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,WAAT,OACH,cAAC,IAAD,CAEEqC,QAAS,WACPzB,EAAmBb,GACnBkC,KAEFf,UAAU,gBACVoB,SAAUvC,IAASW,EAPrB,SASY,MAATX,EAAeC,EAAf,UAA+BD,EAAK2B,cAApC,mBAAuD1B,IARnDD","file":"static/js/17.5beb4472.chunk.js","sourcesContent":["import { useState, useCallback } from 'react'\n\nimport {\n  MenuItem,\n} from '@mui/material'\n\nimport PopoverMenu from '../PopoverMenu.js'\n\nimport MdiIcon from '@mdi/react'\nimport {\n  mdiTranslate,\n} from '@mdi/js'\n\nconst locales = {\n  _: '??',\n  en: 'English',\n  de: 'Deutsch',\n  es: 'Español',\n  pt: 'Português',\n  fr: 'Français',\n  it: 'Italiano',\n  nl: 'Nederlands', // Dutch\n  da: 'Dansk', // Danish\n  sv: 'Svenska', // Swedish\n  nb: 'Norsk bokmål', // Norwegian\n  fi: 'Suomi', // Finish\n  se: 'Davvisámegiella (Northern Sami)', // Northern Sami\n  mt: 'Malti', // Maltese\n  pl: 'Język polski', // Polish\n  ru: 'русский язык', // Russian\n  bg: 'български език', // Bulgarian\n  tr: 'Türkçe',\n  ar: 'اَلْعَرَبِيَّة', // Arabic\n  el: 'ελληνικά', // Greek\n  ro: 'limba română', // Romanian\n  sl: 'slovenščina', // Slovenian\n  // uk: 'украї́нська мо́ва', // Ukrainian\n  // cy: 'Cymraeg', // Welsh\n}\n\nconst localesArray = Object.entries(locales)\n.map(([code, nativeName]) => ({code, nativeName}))\n\nconst defaultOptions = Object.keys(locales)\n\nfunction LocaleSelect({\n  defaultValue,\n  onChange,\n  options = defaultOptions,\n}) {\n  if (\n    defaultValue === null\n    || defaultValue === undefined\n    || defaultValue === ''\n    || locales.hasOwnProperty(defaultValue) === false\n  ) {\n    defaultValue = '_'\n  }\n\n  const [changedLocale, setChangedLocale] = useState(defaultValue)\n\n  const handleLocaleChange = useCallback(newLocale => {\n    setChangedLocale(newLocale)\n    \n    if (newLocale === '_') {\n      newLocale = null\n    }\n\n    if (onChange) {\n      onChange(newLocale)\n    }\n  }, [ setChangedLocale, onChange ])\n  \n  return (\n    <PopoverMenu\n      trigger={(triggerProps, { isOpen }) => (\n        <button\n          {...triggerProps}\n          className=\"default hasIcon\"\n          style={{\n            margin: '0',\n            flexShrink: '0',\n          }}\n        >\n          <span style={{ width: '100%', textAlign: 'start' }}>\n          {\n            changedLocale === '_'\n            ? <MdiIcon\n              path={mdiTranslate}\n              className=\"icon\"\n            />\n            : changedLocale.toUpperCase()\n          }\n          </span>\n          <span style={{\n            marginLeft: 'var(--basis)',\n            lineHeight: '1',\n            verticalAlign: 'text-top',\n          }}>\n            { isOpen ? '▴' : '▾' }\n          </span>\n        </button>\n      )}\n      paperProps={{\n        sx: {\n          maxHeight: '300px',\n        }\n      }}\n    >\n      {({ close }) => (\n        <div style={{\n          padding: 'var(--basis_x2) 0',\n        }}>\n          {\n            localesArray\n            .filter(({ code }) => options.includes(code))\n            .map(({ code, nativeName }) => (\n              <MenuItem\n                key={code}\n                onClick={() => {\n                  handleLocaleChange(code)\n                  close()\n                }}\n                className=\"roundMenuItem\"\n                selected={code === changedLocale}\n              >\n                {code === '_' ? nativeName : `${code.toUpperCase()} — ${nativeName}`}\n              </MenuItem>\n            ))\n          }\n        </div>\n      )}\n    </PopoverMenu>    \n  )\n}\n\nexport default LocaleSelect\n"],"sourceRoot":""}